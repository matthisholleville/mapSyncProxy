global
  stats socket /var/run/api.sock user haproxy group haproxy mode 660 level admin expose-fd listeners
  log stdout format raw local0 info

defaults
  mode http
  log global
  timeout http-request 10s
  timeout connect 5s
  timeout client 10s
  timeout server 10s

frontend stats
  bind *:8404
  stats enable
  stats uri /
  stats refresh 10s

frontend test
  bind *:8888
  stick-table  type binary  len 20  size 100k  expire 10s  store http_req_rate(60s)

  # Track client by base32+src (Host header + URL path + src IP)
  http-request track-sc0 base32+src

  # Set rate-limit-context header (Host + Path)
  http-request set-header X-Rate-Limit-Context %[req.hdr(host)]%[path]

  # Log custom header
  http-request capture req.hdr(X-Rate-Limit-Context) len 64
  log-format My-custom-header\ %[capture.req.hdr(0)] 

  # Check map file to get rate limit for path
  http-request set-var(req.rate_limit)  hdr(X-Rate-Limit-Context),lower,map_beg(/etc/haproxy/maps/rate-limits.map,20)

  # Client's request rate is tracked
  http-request set-var(req.request_rate)  base32+src,table_http_req_rate()

  # Subtract the current request rate from the limit
  # If less than zero, set rate_abuse to true
  acl rate_abuse var(req.rate_limit),sub(req.request_rate) lt 0   

  use_backend be_429_slow_down if rate_abuse
  http-request return status 200 content-type "text/plain" lf-string "Not Rate-limited" if !rate_abuse

backend be_429_slow_down
  http-request tarpit deny_status 429

program api
  command /usr/bin/dataplaneapi --host 0.0.0.0 --port 5555 --haproxy-bin /usr/sbin/haproxy --config-file /usr/local/etc/haproxy/haproxy.cfg --reload-cmd "kill -SIGUSR2 1" --reload-delay 5 --userlist haproxy-dataplaneapi --log-level debug
  no option start-on-reload
